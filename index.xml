<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marcus Olsson</title><link>https://marcus.se.net/</link><description>Recent content on Marcus Olsson</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://marcus.se.net/index.xml" rel="self" type="application/rss+xml"/><item><title>6 tips for improving your Grafana plugin before you publish</title><link>https://marcus.se.net/6-tips-for-improving-your-grafana-plugin-before-you-publish/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://marcus.se.net/6-tips-for-improving-your-grafana-plugin-before-you-publish/</guid><description>Are you putting the final touches on your plugin before you submit it to the Grafana plugin page? In this article, I’ll share a few tips for how to add that extra polish to your plugins.</description></item><item><title>Learn Grafana: Share query results between panels to reduce load time</title><link>https://marcus.se.net/share-results-between-panels/</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/share-results-between-panels/</guid><description>As you add more panels to your dashboard, more requests are being made, potentially leading to your dashboard taking longer to load. While you can limit the data requested in each query, one of the best ways to reduce the loading time is to reduce the number of requests being made to the data source.</description></item><item><title>Beginner-friendly issues</title><link>https://marcus.se.net/beginner-friendly-issues/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/beginner-friendly-issues/</guid><description>&lt;p>One of the first pieces of advice that aspiring contributors get when looking to contribute to their first open source project is to search for “beginner-friendly issues”. By marking these issues as beginner-friendly, they serve as entry points for anyone who wants to get involved with the project.&lt;/p></description></item><item><title>Popular community plugins that can improve your Grafana dashboards</title><link>https://marcus.se.net/popular-community-plugins/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/popular-community-plugins/</guid><description>Since the release of Grafana v7.0, we’ve seen a lot more developers taking advantage of the new plugins platform, which helps them build high-quality custom plugins faster than ever. Not only does this allow them to create their own custom visualizations and data source integrations—taking the Grafana experience to the next-level—but by sharing them with the community, they’re able to help others do the same.</description></item><item><title>Learn Grafana: How to build a scatter plot plugin in Grafana 7.0</title><link>https://marcus.se.net/build-a-scatterplot/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/build-a-scatterplot/</guid><description>There are a lot of great things about Grafana 7.0, but one of my favorite features is the new React-based plugin platform, which has a set of new APIs and design system to help you build your own plugin. The process is easier and faster than ever. In this blog post, I’ll show how you can create a panel plugin for visualizing scatter plots.</description></item><item><title>Plugin showcase: The hourly heatmap panel, built on Grafana's new plugin platform</title><link>https://marcus.se.net/hourly-heatmap-panel/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/hourly-heatmap-panel/</guid><description>Grafana 7.0 introduced a brand new React-based platform, along with a set of improved APIs for building plugins. Since I knew some React from previous projects, I wrote my first Grafana plugin that would adapt the original Carpet plot to the new plugin platform. I’ve called it Hourly heatmap, and in this blog post, I’d like to quickly introduce what it does and how it can be helpful.</description></item><item><title>Learn Grafana: How to automatically repeat rows and panels in dynamic dashboards</title><link>https://marcus.se.net/repeat-rows-and-panels/</link><pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/repeat-rows-and-panels/</guid><description>Running your software on dynamic infrastructure means that your monitoring platform needs to change dynamically. Variables let you reuse a single dashboard for all your services. Select the service you want to inspect from a drop-down menu, and watch panels update to only show you metrics from that service. A common use case for variables is to filter data within a panel. In this blog post, we’ll look at how you can dynamically add and remove entire panels through a feature called repeated panels.</description></item><item><title>WFH tips: Slack hacks that will make you more productive</title><link>https://marcus.se.net/slack-hacks/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/slack-hacks/</guid><description>As the work-from-home culture continues to reshape many people’s lives, the team at Grafana Labs has been sharing tips, tricks, and hacks we have learned as a remote-first company. One tool that has been vital to our internal communications and team building is Slack. If you’ve been using Slack in an office setting, you might find using Slack in a remote setting can be a new experience. Here are some of the best practices we use on Slack for seamless communication and to actually get work done.</description></item><item><title>Learn Grafana: How to use dual axis graphs</title><link>https://marcus.se.net/how-to-use-dual-axis-graphs/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://marcus.se.net/how-to-use-dual-axis-graphs/</guid><description>You&amp;rsquo;re done setting up your first graph panels. You want to do more, look around the visualization settings, and discover the settings for the X and Y axes. You stumble over the configuration for a &amp;ldquo;Right Y&amp;rdquo; axis. You ask yourself, &amp;ldquo;Why on earth would I need another Y axis?&amp;rdquo;</description></item><item><title>Pro Tips: Dashboard Navigation Using Links</title><link>https://marcus.se.net/dashboard-navigation-using-links/</link><pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate><guid>https://marcus.se.net/dashboard-navigation-using-links/</guid><description>Great dashboards answer a limited set of related questions. If you try to answer too many questions in a single dashboard, it can become overly complex. As a consequence, a single dashboard often can’t tell the whole story. So you end up navigating between several, and it can be quite inefficient to search for a particular dashboard every time you need it. Luckily, there are some hacks for navigating between dashboards.</description></item><item><title>Adding context and options to your Go client package</title><link>https://marcus.se.net/adding-context-and-options-to-your-go-client-package/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://marcus.se.net/adding-context-and-options-to-your-go-client-package/</guid><description>This is a follow-up on my previous post where I showed how you can write user-friendly client packages for REST APIs that will make it even more enjoyable for users to integrate with your services. And for many services, the patterns I showed will probably suffice. This time though, we’ll take a look at two additional patterns. First, I’ll show you how you can bring your client package up-to-date by adding support for the context package.</description></item><item><title>Notes on my GolangUK 2016 talk</title><link>https://marcus.se.net/gouk16-notes/</link><pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate><guid>https://marcus.se.net/gouk16-notes/</guid><description>I’m writing this on the way home from GolangUK where I did a talk on Building an Enterprise Service in Go, based on the DDD Sample App. I was really overwhelmed with the positive feedback I got, some of which came from developers who never heard of DDD prior to my talk. Not totally unexpected however, since it’s an approach to a problem space which I believe Go has yet to conquer, but among the feedback I got were a few valid concerns that I thought I would address in the form of a blog post.</description></item><item><title>Domain Driven Design in Go: Part 3</title><link>https://marcus.se.net/go-ddd-part-3/</link><pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate><guid>https://marcus.se.net/go-ddd-part-3/</guid><description>Up until now, we have only looked at one service in isolation, but this is seldom the case in a service-oriented architecture. For the last post in this blog series on Domain Driven Design in Go we will have a look at how we interact with other services. In particular, we will have a look at two concepts that help us reason about these interactions: application services and bounded contexts.</description></item><item><title>Writing a Go client for your RESTful API</title><link>https://marcus.se.net/writing-a-client-package/</link><pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate><guid>https://marcus.se.net/writing-a-client-package/</guid><description>If you are providing a RESTful API for your product, you are already doing developers around the world a huge favor by enabling them to do amazing things, things that you may not even had imagined were possible. By providing your users with a client SDK in their favorite language you are making it even easier to integrate their services with yours. In this blog post I will show you how to write your own client package in Go!</description></item><item><title>Domain Driven Design in Go: Part 2</title><link>https://marcus.se.net/go-ddd-part-2/</link><pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate><guid>https://marcus.se.net/go-ddd-part-2/</guid><description>In my previous post I announced a project I have been tinkering with lately; porting an existing DDD sample application to Go. I elaborated a bit about its background and the general structure of the application. In this post we are going to have a look at some of the implementation aspects that I have encountered so far.</description></item><item><title>Domain Driven Design in Go: Part 1</title><link>https://marcus.se.net/go-ddd/</link><pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate><guid>https://marcus.se.net/go-ddd/</guid><description>In 2008, Citerus developed a Java sample application in close collaboration with Eric Evans, based on the examples in his book. The purpose was to showcase the concepts from DDD in a real-world application. Since then, the application has been ported to other languages such as C# and Ruby. Of course, as a DDD practitioner and a Go developer I thought it might be a fun exercise to try porting it to Go.</description></item><item><title>Events and explosions in a distributed system</title><link>https://marcus.se.net/events-and-explosions/</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://marcus.se.net/events-and-explosions/</guid><description>I did a talk on Event Storming a short while ago where I started off by explaining why state transitions are so much more interesting than the actual states themselves. We had a lot of good discussions afterwards and I felt I wanted to elaborate a little bit further on the theme, in the context of distributed systems.</description></item><item><title>Circuit breaking using hystrix-go</title><link>https://marcus.se.net/hystrix-go-intro/</link><pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate><guid>https://marcus.se.net/hystrix-go-intro/</guid><description>So we have been looking at adding circuit breaking to our services at my current client as part of making them more resilient. We used the fantastic hystrix-go package and since I could not really find any other examples other than the ones in the tests, I thought I might share one.</description></item><item><title>Event Storming - Ett effektivt sätt att utforska affärsprocesser</title><link>https://marcus.se.net/event-storming/</link><pubDate>Tue, 04 Nov 2014 00:00:00 +0000</pubDate><guid>https://marcus.se.net/event-storming/</guid><description>Upplever du att det finns ett glapp mellan de som förstår verksamheten och de som utvecklar mjukvaran? Genom en enkel övning kan ni utforska er affär, underlätta dialogen mellan de inblandade och samtidigt förbättra kvaliteten på er mjukvara.</description></item><item><title>Thoughts on DDD in Go</title><link>https://marcus.se.net/thoughts-on-ddd-in-go/</link><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate><guid>https://marcus.se.net/thoughts-on-ddd-in-go/</guid><description>&lt;p>When I set out to port the DDD sample application to Go, I had done a couple of minor projects in Go on my spare time. The experience I had got from those projects had been refreshing, to say the least. I felt like I was being more productive than I had ever been in other object-oriented programming languages. But then I got curious.&lt;/p></description></item><item><title>Projects</title><link>https://marcus.se.net/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcus.se.net/projects/</guid><description/></item><item><title>Resume</title><link>https://marcus.se.net/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcus.se.net/resume/</guid><description/></item><item><title>Speaking</title><link>https://marcus.se.net/speaking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcus.se.net/speaking/</guid><description>Here are some of the public appearances I&amp;rsquo;ve made throughout the years.
Feel free to contact me to speak at your conference, meetup or corporate event.
Virtual appearances Introduction to Grafana, Rawkode Live, 2020 All about plugins: Building your first panel plugin, Grafana Labs, 2020 Running Chaos Engineering experiments with Gremlin and Grafana, Grafana Labs and Gremlin, 2020 Getting started with Grafana, Grafana Labs, 2020 Intro to Monitoring with Grafana, Rails Girls Kumasi, 2020 Conferences DevOpsDays, Stockholm 2019, Fearless Software Delivery TechWorld Summit, Stockholm 2019, Fearless Software Delivery Google Cloud Summit, Stockholm 2018, Pull-based deployments for Kubernetes Golang UK, London 2016, Building an enterprise service in Go μCon, Stockholm 2015, An eventful world Trainer Monitoring with Grafana, DENOG12 2020 Go Fundamentals, Women In Tech, Bonnier Broadcasting, Stockholm 2018 Go Fundamentals, Diversity Meetup, Google, Stockholm 2017 Organizer Organizing Go Stockholm Meetups since 2015 Organized the Go Stockholm Conference 2018, with 120+ attendees.</description></item></channel></rss>